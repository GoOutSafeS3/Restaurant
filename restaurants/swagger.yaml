openapi: 3.0.1
info:
  title: Restaurants Service API
  description: Restaurants from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: get a list of restaurants
      operationId: app.get_restaurants
      parameters:
      - name: name
        in: query
        description: Restaurant name
        required: false
        schema:
          type: string
      - name: opening_time
        in: query
        description: Open at
        required: false
        schema:
          type: integer
          minimum: 0
          maximum: 23
      - name: open_day
        in: query
        description: Open on
        required: false
        schema:
          type: integer
          minimum: 1 # monday
          maximum: 7 # sunday
      - name: cuisine_type
        in: query
        description: Cuisine type
        required: false
        schema:
          type: string
      - name: menu
        in: query
        description: Restaurant menu
        required: false
        schema:
          type: string
      responses:
        200:
          description: Restaurants found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Restaurants
      summary: Post a restaurant
      operationId: app.post_restaurants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        201:
          description: Restaurant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}:
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant
      operationId: app.get_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Restaurants
      summary: Edit a restaurant
      operationId: app.put_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        200:
          description: Restaurant edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The restaurant has pending reservations tha conflict with the new openings, those must be deleted first, try using the force parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Restaurants
      summary: Delete a restaurant
      operationId: app.delete_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: force
        in: query
        description: Try to delete future reservations, disabled for now
        required: false
        schema:
          type: boolean
      responses:
        204:
          description: Restaurant deleted
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The restaurant has pending reservations, those must be deleted first, try using the force parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/rate:
    get:
      tags:
      - Restaurants
      summary: Get restaurant rating
      operationId: app.get_restaurant_rating
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return restaurant rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Restaurants
      summary: Rate a restaurant
      operationId: app.post_restaurant_rating
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        202:
          description: Rating created (rating of the restaurant not updated for now)
        400:
          description: Bad request or Restaurant already rated by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/tables:
    get:
      tags:
      - Restaurants
      summary: Get restaurant tables
      operationId: app.get_restaurant_tables
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: capacity
        in: query
        description: Capacity required
        required: false
        schema:
          type: integer
          minimum: 1
      responses:
        200:
          description: Return restaurant tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        204:
          description: No adequate table
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Restaurants
      summary: Add a restaurant table
      operationId: app.post_restaurant_table
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        201:
          description: Table created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/{restaurant_id}/tables/{table_id}:
    get:
      tags:
      - Restaurants
      summary: Get restaurant table
      operationId: app.get_restaurant_table
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: table_id
        in: path
        description: Table's Unique identifier
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return restaurant table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        404:
          description: Restaurant or Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Restaurants
      summary: Edit a restaurant table
      operationId: app.put_restaurant_table
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: table_id
        in: path
        description: Table's Unique identifier
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        200:
          description: Table edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Restaurant or Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The table has pending reservations tha conflict with the new capacity, those must be deleted first, try using the force parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Restaurants
      summary: Delete a restaurant table
      operationId: app.delete_restaurant_table
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: table_id
        in: path
        description: Table's Unique identifier
        required: true
        schema:
          type: integer
      - name: force
        in: query
        description: try to delete future reservations, disabled for now
        required: false
        schema:
          type: boolean
      responses:
        204:
          description: Table deleted
        404:
          description: Restaurant or Table does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The table has pending reservations, those must be deleted first, try using the force parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error during the process (try again)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Restaurant:
      required:
      - name
      - lat
      - lon
      - phone
      - first_opening_hour
      - first_closing_hour
      - second_opening_hour
      - second_closing_hour
      - occupation_time
      - cuisine_type
      - menu
      - closed_days
      type: object
      properties:
        url:
          maxLength: 100
          minLength: 1
          type: string
          description: url of the restaurant
          readOnly: true
          example: /restaurants/123
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        rating_val:
          type: number
          readOnly: true
          minimum: 0
          maximum: 5
          example: 3.4
        rating_num:
          type: integer
          readOnly: true
          minimum: 0
          example: 123
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant Latitude
          example: 42.42
        lon:
          type: number
          description: Restaurant Longitude
          example: 42.42
        phone:
          type: string
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: "050123456"
        first_opening_hour:
          type: integer
          description: First opening hour (first submitable booking time)
          nullable: true
          minimum: 0
          maximum: 23
          example: 12
        first_closing_hour:
          type: integer
          description: First closing hour (last submitable booking time)
          nullable: true
          minimum: 0
          maximum: 23
          example: 15
        second_opening_hour:
          type: integer
          description: Second opening hour (if available)
          nullable: true
          minimum: 0
          maximum: 23
          example: Null
        second_closing_hour:
          type: integer
          description: Second closing hour (if available)
          nullable: true
          minimum: 0
          maximum: 23
          example: Null
        occupation_time:
          type: integer
          description: Time for a table to be clear again
          minimum: 1
          maximum: 24
        cuisine_type:
          type: string
          description: Cousine type
        menu:
          type: string
          description: Restaurant menu
        closed_days:
          type: array
          items:
            type: integer
            minimum: 1 # monday
            maximum: 7 # sunday
          minItems: 0
          maxItems: 7
    Rating:
      required:
      - rater_id
      - rating
      type: object
      properties:
        rater_id:
          type: integer
          description: User unique identifier
          writeOnly: true
        rating:
          type: number
          description: Mean rating
          minimum: 0
          maximum: 5
        ratings:
          type: integer
          description: Number of ratings
          readOnly: true
          minimum: 0
    Table:
      required:
        - capacity
      type: object
      properties:
        url:
          maxLength: 100
          minLength: 1
          type: string
          description: url of the table
          readOnly: true
          example: /restaurants/123/tables/123
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        restaurant_id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        capacity:
          type: integer
          description: Table capacity
          minimum: 1
    Error:
      type: object
      properties:
        type:
          type: string
          description: Error type
          example: about:blank
        title:
          type: string
          description: Error name
          example: Bad Request
        status:
          type: integer
          description: Error status code
          example: about:blank
        detail:
          type: string
          description: Error description
          example: None is not of type 'string'